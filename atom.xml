<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lemonMeow.github.io</id>
    <title>LemonMeow</title>
    <updated>2020-11-02T15:22:18.699Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lemonMeow.github.io"/>
    <link rel="self" href="https://lemonMeow.github.io/atom.xml"/>
    <subtitle>知足且上进 温柔且坚定</subtitle>
    <logo>https://lemonMeow.github.io/images/avatar.png</logo>
    <icon>https://lemonMeow.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, LemonMeow</rights>
    <entry>
        <title type="html"><![CDATA[OC-KVO & KVC]]></title>
        <id>https://lemonMeow.github.io/post/oc-kvo/</id>
        <link href="https://lemonMeow.github.io/post/oc-kvo/">
        </link>
        <updated>2020-10-27T14:41:27.000Z</updated>
        <summary type="html"><![CDATA[<p>KVO 全称是 key-value Observing，键值监听，可以用于监听某个对象属性值的改变；<br>
KVC的全称是Key-Value Coding，俗称“键值编码”，可以通过一个key来访问某个属性；</p>
<p>用例代码在文章最后面展示（待更新）。</p>
]]></summary>
        <content type="html"><![CDATA[<p>KVO 全称是 key-value Observing，键值监听，可以用于监听某个对象属性值的改变；<br>
KVC的全称是Key-Value Coding，俗称“键值编码”，可以通过一个key来访问某个属性；</p>
<p>用例代码在文章最后面展示（待更新）。</p>
<!-- more -->
<br>
<h1 id="kvo">KVO</h1>
<h1 id="一-kvo-的实质">一. KVO 的实质</h1>
<h2 id="1-ios用什么方式实现对一个对象的kvokvo的本质是什么">1. iOS用什么方式实现对一个对象的KVO？(KVO的本质是什么？)</h2>
<h3 id="1-未使用kvo监听的对象">1. 未使用KVO监听的对象</h3>
<figure data-type="image" tabindex="1"><img src="https://lemonMeow.github.io/post-images/1603812647145.png" alt="" loading="lazy"></figure>
<h3 id="2-使用了kvo监听的对象">2. 使用了KVO监听的对象</h3>
<figure data-type="image" tabindex="2"><img src="https://lemonMeow.github.io/post-images/1603812654208.png" alt="" loading="lazy"></figure>
<h3 id="3-本质解析">3. 本质解析</h3>
<ol>
<li>利用Runtime API动态生成一个子类，（在添加KVO时动态添加了对应的NSKVONotifying_BXPerson类，继承自BXPerson）。</li>
<li>并且让instance对象的isa指针指向这个NSKVONotifying_BXPerson。</li>
<li>当修改这个instance对象的属性值时，其内部的setValue:()方法实际的实现是调用Foundation的_NSSetIntValueAndNotify函数。</li>
</ol>
<h3 id="4-foundation的_nssetintvalueandnotify的内部实现">4. Foundation的_NSSetIntValueAndNotify的内部实现</h3>
<p>伪代码：</p>
<pre><code>void _NSSetIntValueAndNotify {
    // 1. 即将改变value
    [self willChangeValueForKey];
    // 2. 父类的setter方法，进行赋值操作
    [super setAge: age];
    // 3. value改变完成
    [self didChangeValueForKey];
}
- (void)didChangeValueForKey:(NSString *)key {
    // 会触发监听器（observer）的监听方法
    [observer observeValueForKeyPath:ofObject:change:context:]
}
</code></pre>
<p>验证：<br>
<img src="https://lemonMeow.github.io/post-images/1603815442538.png" alt="" loading="lazy"></p>
<h2 id="2-kvo本质验证">2. KVO本质验证</h2>
<h3 id="1-通过打印添加kvo前后属性值变化的方法实现如图">1. 通过打印添加KVO前后属性值变化的方法实现，如图：</h3>
<figure data-type="image" tabindex="3"><img src="https://lemonMeow.github.io/post-images/1603813600960.png" alt="" loading="lazy"></figure>
<h3 id="2-nskvonotifying_bxperson-和父类bxperson-中的-setheight实际调用是什么">2. NSKVONotifying_BXPerson 和父类BXPerson 中的 setHeight:()实际调用是什么？</h3>
<pre><code>NSLog(@&quot;添加监听后 %p %p&quot;,
      [self.person1 methodForSelector:@selector(setHeight:)],
      [self.person2 methodForSelector:@selector(setHeight:)]);
NSKeyValueObservingOptions options = NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld;
[self.person1 addObserver:self forKeyPath:@&quot;height&quot; options:options context:nil];
NSLog(@&quot;添加监听后 %p %p&quot;,
    [self.person1 methodForSelector:@selector(setHeight:)],
    [self.person2 methodForSelector:@selector(setHeight:)]);
// 断点调试 （lldb）
2020-07-11 19:30:20.726930+0800 BX_KVO[8267:420543] 添加监听后 0x1045cad80 0x1045cad80
2020-07-11 19:30:20.727396+0800 BX_KVO[8267:420543] 添加监听后 0x7fff2564d3a8 0x1045cad80
(lldb) p (IMP)0x1045cad80
(IMP) $0 = 0x00000001045cad80 (BX_KVO`-[BXPerson setHeight:] at BXPerson.m:13)
(lldb) p (IMP)0x7fff2564d3a8
(IMP) $1 = 0x00007fff2564d3a8 (Foundation`_NSSetDoubleValueAndNotify)
(lldb) 
</code></pre>
<p>// 添加观察者之后的person1的setHeight:()方法地址</p>
<ul>
<li><code>p (IMP)0x1045cad80</code><br>
<code>Foundation_NSSetDoubleValueAndNotify</code></li>
</ul>
<p>// 未添加观察者的person的setHeight:() 的方法地址</p>
<ul>
<li><code>p (IMP)0x7fff2564d3a8</code><br>
<code>-(void)setHeight(double)height</code>;</li>
</ul>
<h2 id="3-nskvonotifying_bxperson子类的内部方法">3. NSKVONotifying_BXPerson子类的内部方法</h2>
<pre><code>// 1. 通过runtime获取类对象的方法列表
- (void)printMethodNameOfClass:(Class)clazz {
    unsigned int count;
    // 获取方法数组
    Method *methodList = class_copyMethodList(clazz, &amp;count);
    NSMutableString *mutableString = [NSMutableString string];
    // 遍历所有的方法
    for (int i = 0; i &lt; count; i++) {
        // 获得方法
        Method method = methodList[i];
        // 获得方法名
        NSString *methodString = NSStringFromSelector(method_getName(method));
        // 拼接方法名
        [mutableString appendString:methodString];
        [mutableString appendString:@&quot;， &quot;];
    }
    // class_copyMethodList，class_createMethodList 初始化需要释放
    free(methodList);
    NSLog(@&quot;%@&quot;, mutableString);
}
// 调用
- (void)viewDidLoad {
    [self printMethodNameOfClass:object_getClass(self.person1)];
    [self printMethodNameOfClass:object_getClass(self.person2)];
}
</code></pre>
<p>// 动态生成的子类里方法列表打印结果<br>
<img src="https://lemonMeow.github.io/post-images/1603816085197.png" alt="" loading="lazy"></p>
<h1 id="二-如何手动实现一个kvo">二. 如何手动实现一个KVO</h1>
<pre><code>[self.person1 willChangeValueForKey:@&quot;age&quot;];
 [self.person1 didChangeValueForKey:@&quot;age&quot;];
</code></pre>
<h1 id="三-如果修改了成员变量会触发kvo吗">三. 如果修改了成员变量会触发KVO吗？</h1>
<p>不会触发KVO，KVO的 本质首先要触发set方法，并且调用willChangeValueForKey &amp; didChangeValueForKey才是KVO的本质和实现流程，结合1和2问题。</p>
<h1 id="扩展">扩展</h1>
<p>如何知道添加监听之后的instance的isa指向的是什么？<br>
断点调试：<code>(_lldb)&lt;br&gt; p self.person1.isa ==&gt; NSKVONotifying_BXPerson</code></p>
<h1 id="foundation框架探索简单逆向待更新">Foundation框架探索(简单逆向，待更新)</h1>
<p>工具: IFunBox<br>
反编译工具：Hopper</p>
<h1 id="kvc">KVC</h1>
<h2 id="1-直接修改成员变量会触发kvo吗">1. 直接修改成员变量会触发KVO吗？</h2>
<p>A:不会触发KVO；<br>
解析：self.person-&gt;age = 10; // 访问成员变量的方式<br>
根据KVO底层调用回答，其中最根本是需要触发didChangeValueForKey方法才会触发observer调用方法。</p>
<h2 id="2-通过kvc修改属性值成员变量会触发kvo吗">2. 通过KVC修改属性值/成员变量会触发KVO吗？</h2>
<p>A:一定会触发<br>
解析：KVC赋值过程，其中在赋值过程中KVC会触发<code>willChangeValueForKey</code> &amp; <code>didChangeValueForKey</code>,所以会触发KVO</p>
<h2 id="3-kvc-setvaluel-forkey-setvalueforkeypath过程">3. KVC -  setValueL: forKey: (setValue:forKeyPath:)过程</h2>
<figure data-type="image" tabindex="4"><img src="https://lemonMeow.github.io/post-images/1603900110373.png" alt="" loading="lazy"></figure>
<h2 id="4-kvc-valueforkey-valueforkeypath过程">4. KVC - value:forKey (value:forKeyPath:)过程</h2>
<figure data-type="image" tabindex="5"><img src="https://lemonMeow.github.io/post-images/1603900117139.png" alt="" loading="lazy"></figure>
<h2 id="5-accessinstancevariablesdirectly方法的默认返回值是yes">5. accessInstanceVariablesDirectly方法的默认返回值是YES</h2>
<p>是否允许直接访问成员变量</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[摘抄语录]]></title>
        <id>https://lemonMeow.github.io/post/zhai-chao-yu-lu/</id>
        <link href="https://lemonMeow.github.io/post/zhai-chao-yu-lu/">
        </link>
        <updated>2020-10-22T15:27:11.000Z</updated>
        <summary type="html"><![CDATA[<p>记录一些自己喜欢的、有感触的美文，随着时间的流逝、年龄的增长，可能会发现自己曾经如此幼稚、可爱，还曾自怨自艾、缺少自信，等等。但这就是我...</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录一些自己喜欢的、有感触的美文，随着时间的流逝、年龄的增长，可能会发现自己曾经如此幼稚、可爱，还曾自怨自艾、缺少自信，等等。但这就是我...</p>
<!-- more -->
<ol>
<li>讲真的，我经常不敢相信自己已经二十多岁了，却还是那个分不清东南西北经常迷路的孩子，一难过就哭，一生气就不想说话，表情写在脸上控制不住，我好像还什么都没有准备好，就到了谈婚论嫁的年纪。我以为到了二十岁，人生就会哗的一下子变得壮观美丽，但不是的，我们以为特别的，实际上也不过如此 -- 七七酱JQ</li>
<li>人生是单行道，没有办法回顾，所以也没有什么好后悔的，做自己，接受自己，对自己有合理的期望，努力生活，不放弃爱，这样就好了。-- 七七酱JQ</li>
<li>二十岁的你，迷茫又着急，你想要房子想要车子，你想要旅行想要高品质生活，你那么年轻却窥视觊觎整个世界，你难么浮躁却想要看透生活。你不断催促自己赶快成长，却沉不下心来读一篇文章，你一次次吹响前进的号角，却总是倒在离出发不远的地方。请坚韧些，年轻的朋友，勇敢地前行，愿你以渺小启程，以伟大结束。 -- 七七酱JQ</li>
<li>“无论生活怎样，希望你，保持自律，保持清醒。昨日之深渊，今日之浅淡”</li>
<li>很多人喜欢你，因为你漂亮好看，会说机灵话，有趣好玩儿，多功能，这些喜欢暗含着很多期望。而有的人喜欢人，是看见你哭和狼狈，知道你的辛苦和平凡，允许你不美又不乖，并且好像把肩膀和糖果都给你。</li>
<li>人生大部分困扰：
<ol>
<li>分不清事情和情绪：就是很多事情来的时候，我们会产生情绪用情绪去决策，而不是根据事情本身去决策</li>
<li>分不清目标和手段：有的时候我们会理直气壮，是因为我们觉得出发点正确，当我们这么认为的时候，我们就会觉得我们做的所有事情都是对的，而实际上并不是。</li>
<li>分不清自我和反馈：作为一个个体来讲，你并不清楚这个东西到底是你自己想要的，还是别人鼓励你或者别人期待你想要的</li>
</ol>
</li>
<li>我本不善言辞，却忙于人际交往，我本喜欢读出，却忙于奔波忙碌，而所作的一切，都是为了得到那能解万丈惆怅的碎银几两。原来这个世界，不允许我们内向。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ OC - NSObject]]></title>
        <id>https://lemonMeow.github.io/post/objective-c-de-ben-zhi/</id>
        <link href="https://lemonMeow.github.io/post/objective-c-de-ben-zhi/">
        </link>
        <updated>2020-09-20T15:36:05.000Z</updated>
        <summary type="html"><![CDATA[<p>让我们一起熟悉OC对象的本质</p>
]]></summary>
        <content type="html"><![CDATA[<p>让我们一起熟悉OC对象的本质</p>
<!-- more -->
<p><strong>OC对象的本质</strong></p>
<p>我们平时编写的Objective-C的代码，实际底层都是c/c++代码。<br>
<img src="https://lemonMeow.github.io/post-images/1600616296925.png" alt="" loading="lazy"><br>
所以OC的面向对象都是基于c/c++的数据结构实现的 - <strong>结构体</strong></p>
<h2 id="nsobject-的底层实现">NSObject 的底层实现</h2>
<p>让我们围绕 <code>NSObject *obj = [[NSObject alloc] init];</code> 进行解析。首先<code>NSObject</code>在.h文件中的定义如下:</p>
<pre><code>// NSObject.h
@interface NSObject &lt;NSObject&gt; {
    Class isa;
}
</code></pre>
<p>c++底层代码如下：</p>
<pre><code>struct NSObject_IMPL {
	Class isa; //在64bit 中 isa占8个字节
};

//结构体中Class的定义
typedef struct objc_class *Class;
</code></pre>
<p>从c++代码可以看出，<code>NSObject</code>本质是结构体，其中<code>Class</code>是一个指向结构的指针</p>
<h2 id="实例对象占用内存空间大小64bit">实例对象占用内存空间大小(64bit)</h2>
<pre><code>NSObject *obj = [[NSObject alloc] init];
</code></pre>
<p>这个位置其中有两个容易混淆的概念，<mark>实例对象分配内存大小</mark>和<mark>实例对象的成员变量所占用的大小</mark></p>
<ul>
<li>创建一个实例对象，至少需要多少内存？<br><br>
结构体至少需求的大小（类的实例对象的成员变量所占大小）以其中最大成员变量大小的整数倍对齐（NSObject的最大成员变量字节是8，即以8字节对齐）</li>
</ul>
<pre><code>#import &lt;objc/runtime.h&gt;
class_getInstanceSize([NSObject class]); // 此例结果为 8
</code></pre>
<ul>
<li>创建一个实例对象，实际上分配了多少内存？<br><br>
操作系统内存计算（类的实例对象分配内存大小）以16字节对齐</li>
</ul>
<pre><code>#import &lt;malloc/malloc.h&gt;
malloc_size((__bridge const void *)obj); // 此例结果为 16
</code></pre>
<p>另一个容易混淆的概念<code>sizeof()</code></p>
<p>也能计算内存大小，不同的是，首先他是编译时就会知道<mark>类型</mark>从而计算内存大小；实质上他是个运算符而不是函数</p>
<pre><code>struct NSObject_IMPL {
    Class isa;
};

struct Student_IMPL {
    Class isa;
    int _no;
    int _age;
};

@interface Student : NSObject
{
    int _no;
    int _age;
}
@end

Student *stu = [[Student alloc] init];

NSLog(@&quot;%lu&quot;,sizeof(struct Student_IMPL)); // 16 

NSLog(@&quot;%zd&quot;, class_getInstanceSize([Student class])); // 16 

NSLog(@&quot;%zd&quot;, malloc_size((__bridge const void *)stu)); // 16

// 如果此时Student_IMPL做一些修改

struct Student_IMPL {
    int _no;
    int _age;
};

// 上面3个log结果分别为：8、16、16
// 解析：
// sizeof()是在编译就会计算一个给定的类型的大小，就相当与是一个宏定义，已经固定好的格式。
// class_getInstanceSize()是运行时计算对象的成员变量的大小

</code></pre>
<h2 id="oc对象分类">OC对象分类</h2>
<ul>
<li>instance - 实例对象</li>
<li>Class - 类对象</li>
<li>metaClass - 元类对象</li>
</ul>
<h3 id="instance-实例对象">instance - 实例对象</h3>
<pre><code class="language-objc">BXPerson *person1 = [[BXPerson alloc] init];
BXPerson *person2 = [[BXPerson alloc] init];
// 这是两个不同的实例对象
</code></pre>
<p><strong>What is instance？</strong></p>
<ul>
<li>instace对象就是通过类clloc出来的对象，每次调用alloc都会产生一个新的对象，所以一个类可能有多个isntance对象</li>
<li>多个instance对象占用不同的内存</li>
</ul>
<p><strong>instance对象内存中储存的信息？</strong></p>
<ul>
<li>isa指针</li>
<li>其他成员变量</li>
</ul>
<h3 id="class-类对象">Class - 类对象</h3>
<pre><code class="language-objc">Class personClass1 = [person1 class];
Class personClass2 = [person2 class];
Class personClass3 = object_getClass(person1);
Class personClass4 = object_getClass(person2);
Class personClass5 = [BXPerson class];
// personClass 1~5 都是同一个对象，打印的内存地址是一样的
</code></pre>
<p><strong>What is class？</strong></p>
<ul>
<li>实质是一个结构体的指针。typedef struct objc_class *Class;</li>
<li>每个类的内存中有且只有一个类对象</li>
</ul>
<p><strong>class对象内存中储存的信息？</strong></p>
<ul>
<li>isa指针</li>
<li>superclass指针</li>
<li>类的<mark>属性</mark>信息（@property）、类的<mark>对象方法</mark>信息（instance method）</li>
<li>类的<mark>协议</mark>信息（@protocol）、类的<mark>成员变量</mark>信息（ivar）</li>
</ul>
<h3 id="metaclass-元类对象">metaClass - 元类对象</h3>
<pre><code class="language-objc">Class personMetaClass1 = object_getClass([BXPerson class]);
Class personMetaClass2 = object_getClass(personClass1);
Class personMetaClass3 = object_getClass([person1 class]);
// personMetaClass 1~3 都是同一个对象，打印的内存地址是一样的
</code></pre>
<p><strong>What is metaClass？</strong></p>
<ul>
<li>每个类的内存中有且只有一个metaClass - 元类对象</li>
</ul>
<p><strong>metaClass对象内存中储存的信息？</strong></p>
<ul>
<li>isa指针</li>
<li>superClass指针</li>
<li>类的类方法信息（class method）（以实例方法的形式存在？）</li>
<li>...</li>
</ul>
<p>通过代码可以看出，元类对象与类对象的结构一致都是Class，所以内存中存储的结构也是一致的, 不同的是</p>
<ul>
<li>在类的内存中, 类的类方法信息（class method）为null;</li>
<li>在元类的内存中，类的属性、对象方法、协议信息、成员变量 都为NULL;</li>
</ul>
<h2 id="知识积累">知识积累</h2>
<p><strong>这段代码中personClass始终是类对象，也就是说class这个oc方法，返回的就是类对象。</strong></p>
<pre><code class="language-objc">Class personClass = [[[person1 class] class] class];
</code></pre>
<p><strong>判断是否是元类对象的方法</strong></p>
<pre><code class="language-objc">BOOL ismetaclass = class_isMetaClass(personMetaClass1);
</code></pre>
<p><strong>object_getClass(id  _Nullable obj);</strong></p>
<pre><code class="language-c++">// 源码
Class object_getClass(id obj)
{
    if (obj) return obj-&gt;getIsa();
    else return Nil;
}
</code></pre>
<table>
<thead>
<tr>
<th>传入</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>instance对象</td>
<td>返回class对象</td>
</tr>
<tr>
<td>class对象</td>
<td>metaClass对象</td>
</tr>
<tr>
<td>metaClass对象</td>
<td>NSObject（基类）的metaClass对象</td>
</tr>
</tbody>
</table>
<p><strong>Class objc_getClass()</strong></p>
<pre><code class="language-c++">// 源码
Class objc_getClass(const char *aClassName)
{
    if (!aClassName) return Nil;

    // NO unconnected, YES class handler
    return look_up_class(aClassName, NO, YES);
}
</code></pre>
<ul>
<li>传入一个字符串</li>
<li>返回相对应的类对象</li>
</ul>
<p><strong>+(Class)class; &amp; -(Class)class;</strong></p>
<pre><code class="language-c++">// 源码
- (Class)class {
    return object_getClass(self);
}

+ (Class)class {
    return self;
}
</code></pre>
<p><strong>将Objective-C代码转换为C\C++代码</strong></p>
<p><code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc OC源文件 -o 输出的CPP文件</code></p>
<p>如果需要链接其他框架，使用-framework参数。比如-framework UIKit</p>
<h3 id="利用xcode实时查看内存数据">利用Xcode实时查看内存数据</h3>
<ul>
<li>Xcode工具路径：Debug -&gt; Debug Workfllow -&gt; View Memory （Shift + Command + M）<br>
<img src="https://lemonMeow.github.io/post-images/1600616487064.png" alt="" loading="lazy"></li>
<li>也可以使用下面LLDB命令</li>
</ul>
<h3 id="常用的lldb指令">常用的LLDB指令</h3>
<ul>
<li>print、p：打印</li>
<li>po：打印对象</li>
<li>读取内存
<ul>
<li>memory read/数量·格式·字节数 内存地址
<ul>
<li>x/数量·格式·字节数 内存地址</li>
<li>x/3xw 0x10010</li>
</ul>
</li>
<li>格式
<ul>
<li>x是16进制，f是浮点，d是10进制</li>
</ul>
</li>
<li>字节大小
<ul>
<li>b：byte 1字节，h：half word 2字节</li>
<li>w：word 4字节，g：giant word 8字节</li>
</ul>
</li>
</ul>
</li>
<li>修改内存中的值
<ul>
<li>memory  write  内存地址  数值</li>
<li>memory  write  0x0000010  10</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP 知识点总结]]></title>
        <id>https://lemonMeow.github.io/post/http-zhi-shi-dian-zong-jie-huan-cun-ji-zhi-anddai-li-fu-wu-andhuan-cun-dai-li/</id>
        <link href="https://lemonMeow.github.io/post/http-zhi-shi-dian-zong-jie-huan-cun-ji-zhi-anddai-li-fu-wu-andhuan-cun-dai-li/">
        </link>
        <updated>2020-09-20T07:44:42.000Z</updated>
        <summary type="html"><![CDATA[<p>缓存机制&amp;代理服务&amp;缓存代理</p>
]]></summary>
        <content type="html"><![CDATA[<p>缓存机制&amp;代理服务&amp;缓存代理</p>
<!-- more -->
<h1 id="生鲜速递-缓存机制">生鲜速递 - 缓存机制</h1>
<p>HTTP 的缓存控制和条件请求，用好它们可以减少响应时间、节约网络流量。</p>
<ol>
<li>缓存是优化系统性能的重要手段，HTTP 传输的每一个环节中都可以有缓存；</li>
<li>服务器使用“Cache-Control”设置缓存策略，常用的是“max-age”，表示资源的有效期；</li>
<li>浏览器收到数据就会存入缓存，如果没过期就可以直接使用，过期就要去服务器验证是否仍然可用；</li>
<li>验证资源是否失效需要使用“条件请求”，常用的是“if-Modified-Since”和“If-None-Match”，收到 304 就可以复用缓存里的资源；</li>
<li>验证资源是否被修改的条件有两个：“Last-modified”和“ETag”，需要服务器预先在响应报文里设置，搭配条件请求使用；</li>
<li>浏览器也可以发送“Cache-Control”字段，使用“max-age=0”或“no_cache”刷新数据。</li>
</ol>
<h1 id="良心中间商-代理服务">良心中间商 - 代理服务</h1>
<ol start="7">
<li>HTTP 代理就是客户端和服务器通信链路中的一个中间环节，为两端提供“代理服务”；</li>
<li>代理处于中间层，为 HTTP 处理增加了更多的灵活性，可以实现** 负载均衡 <strong>、</strong> 安全防护 <strong>、</strong> 数据过滤 **等功能；</li>
<li>代理服务器需要使用字段“Via”标记自己的身份，多个代理会形成一个列表；</li>
<li>如果想要知道客户端的真实 IP 地址，可以使用字段“X-Forwarded-For”和“X-Real-IP”；</li>
<li>专门的“代理协议”可以在不改动原始报文的情况下传递客户端的真实 IP。</li>
</ol>
<h1 id="冷链周转-缓存代理">冷链周转 - 缓存代理</h1>
<ol>
<li>计算机领域里最常用的性能优化手段是“时空转换”，也就是“时间换空间”或者“空间换时间”，HTTP 缓存属于后者；</li>
<li>缓存代理是增加了缓存功能的代理服务，缓存源服务器的数据，分发给下游的客户端；</li>
<li>“Cache-Control”字段也可以控制缓存代理，常用的有“private”“s-maxage”“no-transform”等，同样必须配合“Last-modified”“ETag”等字段才能使用；</li>
<li>缓存代理有时候也会带来负面影响，缓存不良数据，需要及时刷新或删除。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP 重定向&跳转]]></title>
        <id>https://lemonMeow.github.io/post/http-de-chong-ding-xiang-andtiao-zhuan/</id>
        <link href="https://lemonMeow.github.io/post/http-de-chong-ding-xiang-andtiao-zhuan/">
        </link>
        <updated>2020-09-20T06:12:34.000Z</updated>
        <summary type="html"><![CDATA[<p>这样的跳转动作是由浏览器的使用者主动发起的，可以称为“<strong>主动跳转</strong>”，但还有一类跳转是由服务器来发起的，浏览器使用者无法控制，相对地就可以称为“<strong>被动跳转</strong> ”，这在 HTTP 协议里有个专门的名词，叫做“<strong>重定向</strong>”（Redirection）。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这样的跳转动作是由浏览器的使用者主动发起的，可以称为“<strong>主动跳转</strong>”，但还有一类跳转是由服务器来发起的，浏览器使用者无法控制，相对地就可以称为“<strong>被动跳转</strong> ”，这在 HTTP 协议里有个专门的名词，叫做“<strong>重定向</strong>”（Redirection）。</p>
<!-- more -->
<h2 id="重定向的过程">重定向的过程</h2>
<p>3××状态码时就说过，301 是“永久重定向”，302 是“临时重定向”，浏览器收到这两个状态码就会跳转到新的 URI。</p>
<p>以上用户是无感知的，通过开发者工具我们可以看到这样的<strong>过程</strong>：请求一个连接，服务器首先返回一个302状态码，紧接着第二个请求被重定向到了“/index.html”。其中，第一个请求的相应报文里多了一个新的字段“Location: /index.html”</p>
<p>“Location”字段属于响应字段，必须出现在响应报文里。但只有配合 301/302 状态码才有意义，它标记了服务器要求重定向的 URI，这里就是要求浏览器跳转到“index.html”。</p>
<p>注意，在重定向时如果只是在站内跳转，你可以放心地使用相对 URI。但如果要跳转到站外，就必须用绝对 URI。</p>
<h2 id="重定向的应用场景">重定向的应用场景</h2>
<p>想了解一下什么时候需要重定向？</p>
<ol>
<li>
<p>一个最常见的原因就是“资源不可用”，需要用另一个新的 URI 来代替。<br><br>
至于不可用的原因那就很多了。例如域名变更、服务器变更、网站改版、系统维护，这些都会导致原 URI 指向的资源无法访问，为了避免出现 404，就需要用重定向跳转到新的 URI，继续为网民提供服务。</p>
</li>
<li>
<p>另一个原因就是“避免重复”，让多个网址都跳转到一个 URI，增加访问入口的同时还不会增加额外的工作量。<br><br>
例如，有的网站都会申请多个名称类似的域名，然后把它们再重定向到主站上。比如，你可以访问一下“qq.com”“github.com ”“bing.com”（记得事先清理缓存），看看它是如何重定向的。</p>
</li>
</ol>
<p>使用重定向跳转，核心是要理解“重定向”和“永久 / 临时”这两个关键词</p>
<ol>
<li>
<p>301 的含义是“永久”的。<br><br>
如果域名、服务器、网站架构发生了大幅度的改变，比如启用了新域名、服务器切换到了新机房、网站目录层次重构，这些都算是“永久性”的改变。原来的 URI 已经不能用了，必须用 301“永久重定向”，通知浏览器和搜索引擎更新到新地址，这也是搜索引擎优化（SEO）要考虑的因素之一。</p>
</li>
<li>
<p>302 的含义是“临时”的。<br><br>
原来的 URI 在将来的某个时间点还会恢复正常，常见的应用场景就是系统维护，把网站重定向到一个通知页面，告诉用户过一会儿再来访问。另一种用法就是“服务降级”，比如在双十一促销的时候，把订单查询、领积分等不重要的功能入口暂时关闭，保证核心服务能够正常运行。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ HTTP Cookie 机制]]></title>
        <id>https://lemonMeow.github.io/post/http/</id>
        <link href="https://lemonMeow.github.io/post/http/">
        </link>
        <updated>2020-09-20T06:12:34.000Z</updated>
        <summary type="html"><![CDATA[<p>我们知道HTTP 是“无状态”的，这既是优点也是缺点。优点是服务器没有状态差异，可以很容易地组成集群，而缺点就是无法支持需要记录状态的事务操作。</p>
<p>Cookie 是服务器委托浏览器存储的一些数据，让服务器有了“记忆能力”；</p>
]]></summary>
        <content type="html"><![CDATA[<p>我们知道HTTP 是“无状态”的，这既是优点也是缺点。优点是服务器没有状态差异，可以很容易地组成集群，而缺点就是无法支持需要记录状态的事务操作。</p>
<p>Cookie 是服务器委托浏览器存储的一些数据，让服务器有了“记忆能力”；</p>
<!-- more -->
<h2 id="cookie的工作原理">Cookie的工作原理</h2>
<p>HTTP 的 Cookie 机制类似于电影《记忆碎片》，既然记不住，那就通过纹身、贴纸条、拍立得等手段想办法记住。说回到HTTP相当于是服务器给每个客户端都贴上一张小纸条，上面写了一些只有服务器才能理解的数据，需要的时候客户端把这些信息发给服务器，服务器看到 Cookie，就能够认出对方是谁了。</p>
<h2 id="如何操作以及方案">如何操作以及方案</h2>
<ol>
<li>响应报文使用 Set-Cookie 字段发送“key=value”形式的 Cookie 值；</li>
<li>请求报文里用 Cookie 字段发送多个 Cookie 值；</li>
<li>为了保护 Cookie，还要给它设置有效期、作用域等属性，常用的有 Max-Age、Expires、Domain、HttpOnly 等；</li>
</ol>
<h2 id="cookie的应用">cookie的应用</h2>
<ol>
<li>Cookie 最基本的一个用途就是身份识别，保存用户的登录信息，实现会话事务。</li>
</ol>
<blockquote>
<p>比如，你用账号和密码登录某电商，登录成功后网站服务器就会发给浏览器一个 Cookie，内容大概是“name=yourid”，这样就成功地把身份标签贴在了你身上。<br>之后你在网站里随便访问哪件商品的页面，浏览器都会自动把身份 Cookie 发给服务器，所以服务器总会知道你的身份，一方面免去了重复登录的麻烦，另一方面也能够自动记录你的浏览记录和购物下单（在后台数据库或者也用 Cookie），实现了“状态保持”。</p>
</blockquote>
<ol start="2">
<li>Cookie 的另一个常见用途是广告跟踪。</li>
</ol>
<blockquote>
<p>你上网的时候肯定看过很多的广告图片，这些图片背后都是广告商网站（例如 Google），它会“偷偷地”给你贴上 Cookie 小纸条，这样你上其他的网站，别的广告就能用 Cookie 读出你的身份，然后做行为分析，再推给你广告。<br> 这种 Cookie 不是由访问的主站存储的，所以又叫“第三方 Cookie”（third-party cookie）。如果广告商势力很大，广告到处都是，那么就比较“恐怖”了，无论你走到哪里它都会通过 Cookie 认出你来，实现广告“精准打击”。<br>为了防止滥用 Cookie 搜集用户隐私，互联网组织相继提出了 DNT（Do Not Track）和 P3P（Platform for Privacy Preferences Project），但实际作用不大。</p>
</blockquote>
<h3 id="总结">总结</h3>
<p>现在已经出现了多种 Local Web Storage 技术，能够比 Cookie 存储更多的数据，但 Cookie 仍然是最通用、兼容性最强的客户端数据存储手段。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OC - 高级面试题]]></title>
        <id>https://lemonMeow.github.io/post/oc-gao-ji-mian-shi-ti/</id>
        <link href="https://lemonMeow.github.io/post/oc-gao-ji-mian-shi-ti/">
        </link>
        <updated>2020-09-18T08:20:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="oc对象">OC对象</h1>
<p><strong>一个NSObject对象占用多少内存？</strong></p>
<ul>
<li>系统分配了16个字节给NSObject对象（通过malloc_size函数获得）</li>
<li>但NSObject对象内部只使用了8个字节的空间（64bit环境下，可以通过class_getInstanceSize函数获得）</li>
</ul>
<p><strong>类的方法存在哪里？为什么不存在实例对象中</strong></p>
<ul>
<li>存在于类的方法列表里</li>
<li>因为方法只存一份即可，不需要创建一个实例对象就存一份。</li>
</ul>
<p><strong>以下两个类的实例对象内存大小</strong></p>
<pre><code class="language-objc">@interface BXPerson : NSObject{
    @public
    int _age;
    int _height;
    int _num;
}
@property (nonatomic, assign) int height;
@end

@implementation BXPerson
@end

NSObject *obj = [[NSObject alloc] init];     
NSLog(@&quot;%zd&quot;, class_getInstanceSize([NSObject class])); // 8
NSLog(@&quot;%zd&quot;, malloc_size((__bridge const void *)(obj))); // 16

BXPerson *person = [[BXPerson alloc] init];
NSLog(@&quot;%zd&quot;, class_getInstanceSize([BXPerson class])); // 24
NSLog(@&quot;%zd&quot;, malloc_size((__bridge const void *)(person))); // 32
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OC - Runtime]]></title>
        <id>https://lemonMeow.github.io/post/oc-runtime/</id>
        <link href="https://lemonMeow.github.io/post/oc-runtime/">
        </link>
        <updated>2020-09-10T06:00:35.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>如何理解RunTime？</strong><br>
代码如何让机器运行启动展示我们想要的结果，实质是类似OC等高级语言通过和汇编机器语言编译成二进制数据对机器进行相应操作，这里我们有一个概念编译，先举个例子--OC中如果声明一个方法-(void)run;即使没有真正实现这个方法情况下，编译时是不会报错的，而在真正运行时才会由于找不到该方法的实现而crash，这就是OC的RunTime做的事情。</p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>如何理解RunTime？</strong><br>
代码如何让机器运行启动展示我们想要的结果，实质是类似OC等高级语言通过和汇编机器语言编译成二进制数据对机器进行相应操作，这里我们有一个概念编译，先举个例子--OC中如果声明一个方法-(void)run;即使没有真正实现这个方法情况下，编译时是不会报错的，而在真正运行时才会由于找不到该方法的实现而crash，这就是OC的RunTime做的事情。</p>
<!-- more -->
<blockquote>
<p>RunTime围绕以下几点展开</p>
</blockquote>
<ul>
<li>对象与方法的本质</li>
<li>消息发送</li>
<li>动态方法解析</li>
<li>消息转发</li>
</ul>
<blockquote>
<p>OC代码与RunTime进行交互的途径?</p>
</blockquote>
<ol>
<li>runtime API;</li>
<li>NSObject API;</li>
<li>OC方法，例如@selector(run);</li>
</ol>
<blockquote>
<p>OC方法调用 / 消息机制 是什么？</p>
</blockquote>
<ul>
<li>给方法调用者发送消息，<code>objc_msgSend(id, sel)</code>底层实现，其中包含两个概念
<ul>
<li>消息接收者（receiver）即 <code>id</code>：（实例对象、类对象）</li>
<li>消息名称 即 <code>sel</code>（<code>@selecter(test)</code> / <code>sel_registerName(&quot;test&quot;)</code>）: test</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>objc_msgSend()</code>执行流程（方法查找流程）可以大致分为3大阶段</p>
</blockquote>
<ul>
<li>消息发送</li>
<li>动态方法解析</li>
<li>消息转发</li>
</ul>
<h1 id="一-对象与方法的本质">一. 对象与方法的本质</h1>
<blockquote>
<p>oc代码 转成c++ 代码命令：clang -rewrite-objc xxxx.m -o xxxx.cpp</p>
</blockquote>
<pre><code class="language-objc">// OC
Person *person = [[Person alloc] init];

// C++
BXPerson *person = ((BXPerson *(*)(id, SEL))(void *)objc_msgSend)((id)((BXPerson *(*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(&quot;BXPerson&quot;), sel_registerName(&quot;alloc&quot;)), sel_registerName(&quot;init&quot;));

// C++ 去掉强制类型转换(简洁版)
BXPerson *person = (objc_msgSend)((objc_msgSend)(objc_getClass(&quot;BXPerson&quot;), sel_registerName(&quot;alloc&quot;)), sel_registerName(&quot;init&quot;));

// OC 
[person run];

// C++ 简洁版
(objc_msgSend)(person, sel_registerName(&quot;run&quot;));

// 其中 BXPerson 对象的定义
#ifndef _REWRITER_typedef_BXPerson
#define _REWRITER_typedef_BXPerson
typedef struct objc_object BXPerson;
typedef struct {} _objc_exc_BXPerson;
#endif

struct BXPerson_IMPL {
	struct NSObject_IMPL NSObject_IVARS;
};
</code></pre>
<ul>
<li>(Person <em>(</em>)(id, SEL)) ：强制类型转换，可以看出，Person这个类的结构体包含的内容有：id self 消息接受者；sel _cmd 消息；</li>
<li>objc_msgSend()</li>
<li>objc_getClass(&quot;Person&quot;)</li>
<li>sel_registerName(&quot;alloc&quot;)</li>
<li>sel_registerName(&quot;init&quot;)</li>
</ul>
<h2 id="1-对象的本质结构体">1. 对象的本质：结构体</h2>
<p>从上面代码，可以看出对象的本质就是结构体</p>
<h2 id="2-方法的本质发送消息">2. 方法的本质：发送消息</h2>
<blockquote>
<p>objc_msgSend(person, sel_registerName(&quot;run&quot;));<br></p>
</blockquote>
<ul>
<li>消息的组成：<br>
<ul>
<li>person - 消息接受者</li>
<li>sel_registerName(&quot;run&quot;) - 方法编号，实质就是name</li>
</ul>
</li>
<li>任何方法的调用底层函数（伪代码）：
<ul>
<li>void runIMP(id self, sel _cmd) {}，其中：</li>
<li>id self 就是方法的接受者；</li>
<li>sel _cmd 就是方法的编号；</li>
<li>imp是函数实现的指针；</li>
</ul>
</li>
<li><mark>怎样通过sel找到imp？</mark></li>
</ul>
<h1 id="二消息发送">二.消息发送</h1>
<h2 id="1类方法与实例方法">1.类方法与实例方法</h2>
<blockquote>
<p>sel_registerName(&quot;run&quot;)  &lt;==&gt; @selector(run) <br></p>
</blockquote>
<ul>
<li>实例方法调用：objc_msgSend(person, sel_registerName(&quot;run&quot;));</li>
<li>类方法的调用：objc_msgSend(objc_getClass(&quot;BXPerson&quot;), sel_registerName(&quot;alloc&quot;))</li>
</ul>
<h2 id="总结">总结：</h2>
<ul>
<li>实例方法存在于该类的方法列表里</li>
<li>类方法存在于元类的方法列表里，且在元类里以实例方法的形式存在</li>
</ul>
<h2 id="2-方法查找-objc_msgsend">2. 方法查找 objc_msgSend</h2>
<h3 id="1objc_msgsend-为什么用汇编写">1.objc_msgSend 为什么用汇编写？</h3>
<ul>
<li>C语言（静态函数，编译时）不可能通过写一个函数来保留未知的参数跳转到任意指针，即无法完成运行时机制</li>
<li>汇编速度快，并且可通过寄存器进行存储等操作</li>
</ul>
<h3 id="2oc中方法一步一步向机器能识别的代码走下去也就是方法查找流程">2.OC中方法一步一步向机器能识别的代码走下去，也就是方法查找流程</h3>
<p>有两种消息查找方式：</p>
<ul>
<li>从“<mark>相应的缓存</mark>”中通过汇编 -- 快速</li>
<li>C/C++/汇编 共同查找，是一个复杂的过程 -- 慢速；找到之后再存入缓存中（哈希表）一遍下次进行快速查找</li>
</ul>
<blockquote>
<p>相应的缓存:类(objc_class)中有一个参数cache_t cache，用来存储sel &amp; imp 方法列表 即 哈希表，通过哈希表查找是快速的</p>
</blockquote>
<h3 id="3objc_msgsend-源码解析">3.objc_msgSend 源码解析</h3>
<p>objc_msgSend 源码是汇编代码<br>
入口：objc-msg-arm64.s</p>
<pre><code>// 伪代码
// 1. m.304 
ENTRY _objc_msgSend

// 2. calls imp or objc_msgSend_uncached
CacheLookup NORMAL

// 3. not-hit bucket
CheckMiss

// 4
__objc_msgSend_uncached

// 5.
MethodTableLookup

// 6. 从这步开始走到c/c++部分
__class_lookupMethodAndLoadCache3

// 结束 m.347
END_ENTRY _objc_msgSend
</code></pre>
<ul>
<li>汇编部分
<ul>
<li>大概就是从哈希表里直接查找，找到就返回imp，找不到就去和C中递归查找，并且找到后放入哈希表中缓存，以便下次快速查找</li>
</ul>
</li>
</ul>
<pre><code class="language-c++">// 1. 
IMP _class_lookupMethodAndLoadCache3(id obj, SEL sel, Class cls)
// 2.
IMP lookUpImpOrForward(Class cls, SEL sel, id inst, 
                       bool initialize, bool cache, bool resolver)
</code></pre>
<ul>
<li>C、C++
<ul>
<li>lookUpImpOrForward</li>
<li>realizeClass(cls);</li>
<li>_class_initialize (_class_getNonMetaClass(cls, inst));</li>
<li>以下是C递归查找，当前类 -&gt; 父类 -&gt; 元类 -&gt; ... -&gt;NSObject</li>
<li>getMethodNoSuper_nolock(cls, sel);</li>
<li>log_and_fill_cache(cls, meth-&gt;imp, sel, inst, cls);<br>
<br><br>
<br><br>
以上是方法查找过程，且最终找到了imp</li>
</ul>
</li>
</ul>
<h1 id="三-动态方法解析-_class_resolvemethod">三. 动态方法解析 - _class_resolveMethod</h1>
<blockquote>
<p>&quot;No implementation found. Try method resolver once.&quot;<br><br>
如果imp没有找到，此时要进行动态方法解析,且仅执行一次（标志位triedResolver）。</p>
</blockquote>
<pre><code>void _class_resolveMethod(Class cls, SEL sel, id inst)
{
    if (! cls-&gt;isMetaClass()) {
        // try [cls resolveInstanceMethod:sel]
        _class_resolveInstanceMethod(cls, sel, inst);
    } 
    // 元类，先走类方法解析
    // 继续走类的实例方法解析
    else {
        // try [nonMetaClass resolveClassMethod:sel]
        // and [cls resolveInstanceMethod:sel]
        _class_resolveClassMethod(cls, sel, inst);
        if (!lookUpImpOrNil(cls, sel, inst, 
                            NO/*initialize*/, YES/*cache*/, NO/*resolver*/)) 
        {
            _class_resolveInstanceMethod(cls, sel, inst);
        }
    }
}
</code></pre>
<p>_class_resolveMethod 源码解析：</p>
<h2 id="1-method-resolution">1. Method resolution</h2>
<ul>
<li>1.判断 cls 非元类，走动态实例方法解析。<br>_class_resolveInstanceMethod &lt;==&gt; +(BOOL)resolveInstanceMethod:(SEL)sel;</li>
<li>2.cls 是元类，走类方法解析。并且再走一步实例方法解析。<br>_class_resolveClassMethod &lt;==&gt; + (BOOL)resolveClassMethod:(SEL)sel; ==&gt;_class_resolveInstanceMethod</li>
</ul>
<blockquote>
<p>可重写这两个方法以达到防止crash的情况。两个方法实现逻辑一致<br><br>
我们如何收到这两个方法的调用？<br><br>
BOOL (*msg)(Class, SEL, SEL) = (<strong>typeof</strong>(msg))objc_msgSend;<br><br>
bool resolved = msg(_class_getNonMetaClass(cls, inst),<br>
SEL_resolveClassMethod, sel);<br><br>
实质就是在这两个方法内部，runtime会发送一个消息即这两个方法被调用。</p>
</blockquote>
<ul>
<li>如果没有重写以上两个方法，runtime就会走下面一个流程，<mark>消息转发</mark></li>
</ul>
<h1 id="四-消息转发">四. 消息转发</h1>
<blockquote>
<p>// No implementation found, and method resolver didn't help.<br>   // Use forwarding.<br> 动态解析后没有实现以上两个方法则走消息转发机制</p>
</blockquote>
<blockquote>
<p>imp = (IMP)_objc_msgForward_impcache;<br><br>
消息转发是汇编调用，苹果闭源代码</p>
</blockquote>
<p>解决方案：(跨域请求声明)</p>
<pre><code class="language-objc">// main.m
#import &lt;Foundation/Foundation.h&gt;
#import &quot;LGStudent.h&quot;
#include &lt;objc/message.h&gt; // 看到这个斜杠我们就知道runtime不在runtime文件 在objc文件

/***********************************************************************
* instrumentObjcMessageSends
**********************************************************************/
// Define this everywhere even if it isn't used to simplify fork() safety code.
// 该函数就是打印log
extern void instrumentObjcMessageSends(BOOL);

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        instrumentObjcMessageSends(YES);
        [LGPerson  walk];
        instrumentObjcMessageSends(NO);
    }
    return 0;
}
</code></pre>
<p>运行成功后，/private/tmp/msgSends-18316 该路径下回生成msgSends-xxx 方法列表，里面保存的是该项目的所有调用的方法&amp;顺序。由此我们可以重写一下方法，达到自定义功能，例如：<mark>crash收集，防止项目crash，埋点功能</mark> 等。aspect</p>
<h2 id="1-method-fast-forwarding">1. Method Fast Forwarding</h2>
<blockquote>
<p>-(id)forwardingTargetForSelector:(SEL)aSelector <br><br>
Runtimer 调用这个方法，给你一个把这个消息转发给其他对象的机会，只要这个方法返回的不是nil或者self，消息转发就会启动，返送的对象就是你返回的对象，否则就会继续走下面的方法 Normal Forwarding。此方法可以直接返回YES，则不会走下面两个方法。</p>
</blockquote>
<h2 id="2-method-normal-forwarding">2. Method Normal Forwarding</h2>
<ul>
<li>-(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector <br> 方法签名：获取该函数的参数和返回值类型，如果该函数返回nil，runtime会发送-doesNorRecogniazeSelector:消息，程序挂掉。</li>
<li>-(void)forwardInvocation:(NSInvocation *)anInvocation <br> 消息重定向转发：runtime会创建一个NSInvocation对象，并发送消息给目标对象。</li>
</ul>
<h1 id="扩展">扩展</h1>
<ul>
<li>如果在底层搜索不到对应的方法，尝试减少一个- 继续查找</li>
</ul>
<!-- more -->
<!-- more -->
<!-- more -->
]]></content>
    </entry>
</feed>